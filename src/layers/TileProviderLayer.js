L.MapExpress.Layers.TileProviderLayer = L.GridLayer.extend ({	initialize: function (tileProvider, options) {		options = L.setOptions(this, options);				this.tileProvider = tileProvider;				 // detecting retina displays, adjusting tileSize and zoom levels        if (options.detectRetina && L.Browser.retina && options.maxZoom > 0) {            options.tileSize = Math.floor(options.tileSize / 2);            options.zoomOffset++;            options.minZoom = Math.max(0, options.minZoom);            options.maxZoom--;        }        // for https://github.com/Leaflet/Leaflet/issues/137        if (!L.Browser.android) {            this.on('tileunload', this._onTileRemove);        }	},		createTile: function (coords, done) {		var tile = this.tileProvider.getTileImage (coords);						L.DomEvent.on(tile, 'load', L.bind(this._tileOnLoad, this, done, tile));		L.DomEvent.on(tile, 'error', L.bind(this._tileOnError, this, done, tile));				return tile;	},		_tileOnLoad: function (done, tile) {		if (L.Browser.ielt9) {			setTimeout(L.bind(done, this, null, tile), 0);		} else {			done(null, tile);		}	},		_tileOnError: function (done, tile, e) {		var errorUrl = this.options.errorTileUrl;		if (errorUrl) {			tile.src = errorUrl;		}		done(e, tile);	},		_onTileRemove: function (e) {        e.tile.onload = null;    },});